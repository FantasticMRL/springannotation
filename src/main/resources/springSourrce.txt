Spring容器的创建以及初始化过程：refresh();
1.prepareRefresh();刷新前的预处理；
    1）// Initialize any placeholder property sources in the context environment
      	 initPropertySources();初始化的一些属性设置；子类自定义属性个性化的设置方法
    2）// Validate that all properties marked as required are resolvable
      		// see ConfigurablePropertyResolver#setRequiredProperties
      		getEnvironment().validateRequiredProperties();校验属性的合法
    3）// Allow for the collection of early ApplicationEvents,
      		// to be published once the multicaster is available...
      		this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();保存容器中的一些早些的事件

2.	// Tell the subclass to refresh the internal bean factory.
  			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();//获取bean工厂
     1)refreshBeanFactory();创建bean工厂
        创建beanfactorythis.beanFactory = new DefaultListableBeanFactory();设置SerializationId
     2)		ConfigurableListableBeanFactory beanFactory = getBeanFactory();返回GenericApplicationContext创建的beanfactory对象
     3)将创建的bean工厂返回：org.springframework.beans.factory.support.DefaultListableBeanFactory

3.// Prepare the bean factory for use in this context.
  			prepareBeanFactory(beanFactory);对beanfactory做一些预处理设置
     1）设置beanfactory的类加载器，表达式解析器
     2）添加部分beanpostprocessor（ApplicationContextAwareProcessor）
     3）设置的忽略的自动装配的接口
     4）注册可以解析的自动装配 ；我们能直接在任何组件中自动注入：BeanFactory；ResourceLoader；ApplicationEventPublisher；ApplicationContext
     5）// Register early post-processor for detecting inner beans as ApplicationListeners.
       		beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));
     6）注册能用的组件，environment：ConfigurableEnvironment
     ....

4.// Allows post-processing of the bean factory in context subclasses.
  				postProcessBeanFactory(beanFactory);BeanFactory准备工作完成后进行的后置处理工作。
        1）子类通过重写这个方法，在BeanFactory创建并预准备后做进一步设置

========================================================以上是BeanFactory的创建和预准备工作=====================

5.	// Invoke factory processors registered as beans in the context.
  				invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor：BeanFactory的后置处理器，在beanfactory标准初始化之后执行，
  				BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor
  	   1）执行PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());
            1，获取所有的BeanDefinitionRegistryPostProcessor
            2.先执行实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessor的postProcessBeanDefinitionRegistry
            3.再执行实现了Ordered接口的BeanDefinitionRegistryPostProcessor的postProcessBeanDefinitionRegistry
            4）最后执行没有显示任何优先级接口的BeanDefinitionRegistryPostProcessor的postProcessBeanDefinitionRegistry


          再执行BeanFactoryPostProcessor的方法
          和上面执行的步骤一致


6.// Register bean processors that intercept bean creation.
  				registerBeanPostProcessors(beanFactory);注册BeanPostProcessor（Bean的后置处理器）拦截bean的创建过程


  	       不同接口类型的BeanPostProcessor在bean创建前后的执行时机不一样
  	        BeanPostProcessor
  	        DestructionAwareBeanPostProcessor
  	        MergedBeanDefinitionPostProcessor
  	        InstantiationAwareBeanPostProcessor
  	        SmartInstantiationAwareBeanPostProcessor

  	         1）获取所有的BeanPostProcessor；后置处理器都有PriorityOrdered，Ordered
  	         2）先注册PriorityOrdered接口的BeanPostProcessor，把每一个BeanPostProcessor添加到beanFactory
  	         3）再注册实现Ordered接口的
  	         4）在注册没有实现任何优先级接口的
  	         5—）最终注册MergedBeanDefinitionPostProcessor和ApplicationListenerDetector（检查bean创建完成后是否是applicationlistener,如果是）

7.// Initialize message source for this context.
  				initMessageSource();初始化MessageSource组件（做国际化，消息绑定，消息解析）

  			1）		ConfigurableListableBeanFactory beanFactory = getBeanFactory();获取bean工厂
  			2）看容器是否有id为messageSource的组件，有赋值给messageSource属性，没有创建DelegatingMessageSource

  			3）把创建好的messageSource注册在容器中，以后获取国际化配置文件值可以自动注入messageSource，调用getMessage方法
                public String getMessage(String code, Object[] args, String defaultMessage, Locale locale)

8.	// Initialize event multicaster for this context.
  				initApplicationEventMulticaster();初始化事件派发器

  			1）拿到bean工厂
  			2）从bean工厂获取applicationEventMulticaster事件派发器
  			3）如果上一步没有配置，创建SimpleApplicationEventMulticaster
  			4）将applicationEventMulticaster添加到bean工厂，以后其他组件就能自动注入

9.// Initialize other special beans in specific context subclasses.
  				onRefresh();留给子类的，重写这个方法，在容器刷新的时候自定义逻辑

10.	// Check for listener beans and register them.
   				registerListeners();给容器中所有的的ApplicationListener注册进来
        1）从容器拿到所有ApplicationListener组件，
        2）将每个监听器添加到事件派发器中
        3）派发之前步骤产生的事件

11.// Instantiate all remaining (non-lazy-init) singletons.
   				finishBeanFactoryInitialization(beanFactory);初始化所有的剩下的单实例bean
        1）// Instantiate all remaining (non-lazy-init) singletons.
          		beanFactory.preInstantiateSingletons();初始化所有的剩下的单实例bean
               1.获取容器中的所有bean，依次进行初始化和和创建对象
               2)拿到bean的定义信息初始化所有的剩下的单实例bean；RootBeanDefinition
               3）!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit()不是抽象的，是单例的，不是懒加载的
                    1.判断是否是FactoryBean，是否是实现FactoryBean接口的bean（调用getObject方法创建工厂模式）
                    2，不是，调用getBean创建对象,(ioc的getBean方法)
                        1.getBean-> 调用doGetBean(name, null, null, false);
                        2.获取缓存中的单实例bean，getSingleton(beanName);所有创建的单实例bean都会被缓存起来
                            从	private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);
                        3.缓存中拿不到，开始bean的创建流程：

                        4.标记当前bean已经被创建，markBeanAsCreated(beanName);
                        5.获取bean的定义信息
                        6.获取当前bean依赖的其他bean，如果有按照getBean的方式把依赖的bean先创建出来
                        7.启动单例bean的创建流程
                            1）protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args)
                            2）Object bean = resolveBeforeInstantiation(beanName, mbdToUse);让beanpostprocessor先拦截返回代理对象
                                InstantiationAwareBeanPostProcessor：提前执行；
                                先触发postProcessBeforeInstantiation()
                                如果有返回值，在触发postProcessAfterInitialization()
                            3)如果InstantiationAwareBeanPostProcessor没有返回代理对象：
                            4）调用	Object beanInstance = doCreateBean(beanName, mbdToUse, args);创建bean
                                1）创建bean的实例：instanceWrapper = createBeanInstance(beanName, mbd, args);
                                    利用工厂方法或者构造器创建bean的实例
                                2）applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
                                    调用MergedBeanDefinitionPostProcessor的bdp.postProcessMergedBeanDefinition(mbd, beanType, beanName);
                                3）populateBean(beanName, mbd, instanceWrapper);为bean的属性赋值
                                    赋值之前：
                                        1.拿到InstantiationAwareBeanPostProcessor
                                            执行postProcessAfterInstantiation
                                        2.拿到InstantiationAwareBeanPostProcessor
                                            执行postProcessPropertyValues
                                       ====赋值===
                                        3.应用bean属性的值：为属性利用setter方法进行赋值
                                            		applyPropertyValues(beanName, mbd, bw, pvs);
                                4）initializeBean(beanName, exposedObject, mbd);初始化
                                    1）invokeAwareMethods(beanName, bean);执行aware接口的方法
                                         BeanNameAware；BeanClassLoaderAware；BeanFactoryAware
                                    2）【执行后置处理器初始化之前】applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
                                        BeanPostProcessor的postProcessBeforeInitialization
                                    3）【执行初始化方法】invokeInitMethods(beanName, wrappedBean, mbd);
                                        1）是否是InitializingBean接口的实现，执行接口规定的初始化
                                        2）是否自定义初始化方法
                                    4）【执行后置处理器初始化之后】
                                          BeanPostProcessor的postProcessAfterInitialization
                                5）registerDisposableBeanIfNecessary(beanName, bean, mbd);注册bean的销毁方法
                            5）将创建的bean加入到singletonObjects中
                                ioc容器就是这些Map；很多的Map保存了单例bean，环境信息


                     所有bean创建完成之后。检查是否是SmartInitializingSingleton这个接口的，
                     如果是：执行afterSingletonsInstantiated


12.// Last step: publish corresponding event.
   				finishRefresh();完成BeanFactory的初始化创建工作，IOC容器创建完成

   	1）// Initialize lifecycle processor for this context.
      		1）initLifecycleProcessor();初始化和声明周期有关的后置处理器
      		    默认从容器中找，使用默认的DefaultLifecycleProcessor，并且注册在容器中
      		    LifecycleProcessor的实现类，可以在beanfactory的onRefresh和onClose进行调用
      		2)// Propagate refresh to lifecycle processor first.
              		getLifecycleProcessor().onRefresh();拿到前面的生命周期处理器(BeanFactory)回调onRefresh
            3)// Publish the final event.
              		publishEvent(new ContextRefreshedEvent(this));发布容器刷新完成事件
            4)	// Participate in LiveBeansView MBean, if active.
              		LiveBeansView.registerApplicationContext(this);



             =================================================总结===============================
             1）Spring容器在启动的时候，会保存所有注册进来的Bean的定义信息
                1）使用xml注册bean
                2）使用注解注册Bean @Service,@Component
             2)spring容器会创建这些bean(合适的时机）
                1）用到的时候，利用getBean方法创建，创建好之后保存在容器中
                2）统一创建所有剩下的bean的时候：finishBeanFactoryInitialization

             3）后置处理器：
                1）每一个bean创建完成，都会使用各种后置处理器进行处理，来增强bean的功能、
                    AutowiredAnnotationBeanPostProcessor:处理自动注入
                    AnnotationAwareAspectJAutoProxyCreator:做AOP功能
                    .....

                    增强的功能注解
             4)Spring的事件驱动：
                ApplicationListener:事件监听
                事件派发：ApplicationEventMulticaster

















































